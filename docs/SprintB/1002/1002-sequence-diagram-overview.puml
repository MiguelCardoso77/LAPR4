@startuml
autonumber


actor "Customer Manager" as CM
participant CreateJobOpeningUI <<presentation>>
participant CreateJobOpeningController <<application>>
participant PersistenceContext <<persistence>>
participant RepositoryFactory <<factory>>
database CustomerRepository <<repository>>
participant Customer <<Company>>
participant JobOpening <<JobOpening>>
database JobOpeningRepository <<repository>>

activate CM


    CM -> CreateJobOpeningUI: create new JobOpening

        activate CreateJobOpeningUI

    CreateJobOpeningUI --> CM: asks for the JobOpening's information

        deactivate CreateJobOpeningUI

    CM -> CreateJobOpeningUI : Description, VacanciesNumber, Address, \nMode, ContractType, TitleOrFunction, JobReference, ProcessDate

        activate CreateJobOpeningUI

    CreateJobOpeningUI -> CreateJobOpeningController: createJobOpening(description, vacanciesNumber, \n address, mode, contractType, titleOrFunction, \n jobReference, processDate)

        activate CreateJobOpeningController

    CreateJobOpeningController -> PersistenceContext : repositories()

        activate PersistenceContext

    PersistenceContext --> CreateJobOpeningController : factory

        deactivate PersistenceContext

    CreateJobOpeningController -> RepositoryFactory : companies()

        activate RepositoryFactory

    RepositoryFactory --> CreateJobOpeningController : companies

        deactivate RepositoryFactory

alt companyExists() return true

    CreateJobOpeningController -> CustomerRepository : findCompanyByCode(companyName)
        activate CustomerRepository

    CustomerRepository --> CreateJobOpeningController : company
        deactivate CustomerRepository
end alt


alt companyExists() return false
    CreateJobOpeningController -> Customer: create(code, name)
        activate Customer

    Customer --> CreateJobOpeningController: company
        deactivate Customer
end alt

    CreateJobOpeningController -> JobOpening: create(description, vacanciesNumber, address, mode, contractType, titleOrFunction, \n jobReference, processDate, company)

        activate JobOpening

    JobOpening --> CreateJobOpeningController: jobOpening

        deactivate JobOpening

    CreateJobOpeningController -> JobOpeningRepository : save(JobOpening)

        activate JobOpeningRepository

    JobOpeningRepository --> CreateJobOpeningController: return success

        deactivate JobOpeningRepository

    CreateJobOpeningController --> CreateJobOpeningUI : JobOpening

        deactivate CreateJobOpeningController

    CreateJobOpeningUI --> CM : shows operation's success

        deactivate CreateJobOpeningUI

        deactivate CM

@enduml