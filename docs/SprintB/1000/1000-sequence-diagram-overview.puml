@startuml
autonumber


actor Administrator

participant AddUserUI <<presentation>>
participant ActivateUserUI <<presentation>>
participant DeactivateUserUI <<presentation>>
participant ListBackofficeUsersUI <<presentation>>


participant AddUserController <<application>>
participant ActivateUserController <<application>>
participant DeactivateUserController <<application>>
participant ListUsersController <<application>>

participant Jobs4UPasswordPolicy <<password generator>>
participant AuthorizationService <<service>>
participant UserManagementService <<service>>
participant SystemUserBuilder <<userBuilder>>
database UserRepository <<repository>>
participant SystemUser <<systemUser>>



activate Administrator

alt option add user
    Administrator -> AddUserUI: Add SystemUser

        activate AddUserUI

    AddUserUI --> Administrator: asks for SystemUser's information

        deactivate AddUserUI

    Administrator -> AddUserUI: Name, TelephoneNumber, Email, Role

        activate AddUserUI

    AddUserUI -> AddUserController: passwordGenerator(name)

        activate AddUserController

    AddUserController -> Jobs4UPasswordPolicy: passwordGenerator(name)

        activate Jobs4UPasswordPolicy

    Jobs4UPasswordPolicy --> AddUserController: password

        deactivate Jobs4UPasswordPolicy

    AddUserController --> AddUserUI: password

        deactivate AddUserController

    AddUserUI -> AddUserController: addUser()

        activate AddUserController

    AddUserController -> AuthorizationService: ensureAuthenticatedUserHasAnyOf(roles)

        activate AuthorizationService

    AuthorizationService --> AddUserController: true

        deactivate AuthorizationService

    AddUserController -> UserManagementService: registerNewUser(name,password,email,role)

        activate UserManagementService

    UserManagementService -> SystemUserBuilder: build()
        activate SystemUserBuilder

    SystemUserBuilder --> UserManagementService: systemUser

        deactivate SystemUserBuilder

    UserManagementService -> UserRepository: save(systemUser)

        activate UserRepository

    UserRepository --> UserManagementService: systemUser

        deactivate UserRepository

    UserManagementService --> AddUserController: systemUser

        deactivate UserManagementService

    AddUserController --> AddUserUI: systemUser

        deactivate AddUserController

    AddUserUI --> Administrator : shows operation's success

        deactivate AddUserUI
end alt





alt option activate user
    Administrator -> ActivateUserUI: activate systemUser

        activate ActivateUserUI

    ActivateUserUI --> Administrator: asks to select which systemUser to activate

        deactivate ActivateUserUI

    Administrator -> ActivateUserUI: selects systemUser

        activate ActivateUserUI

    ActivateUserUI -> ActivateUserController: activateUser(systemUser)

        activate ActivateUserController

    ActivateUserController -> AuthorizationService: ensureAuthenticatedUserHasAnyOf(roles)

        activate AuthorizationService

    AuthorizationService --> ActivateUserController: true

        deactivate AuthorizationService

    ActivateUserController -> UserManagementService: activateUser(systemUser)

        activate UserManagementService

    UserManagementService -> SystemUser: activate(currentTime)

        activate SystemUser

    SystemUser --> UserManagementService: return success

        deactivate SystemUser

    UserManagementService -> UserRepository: save(systemUser)

        activate UserRepository

    UserRepository --> UserManagementService: systemUser

        deactivate UserRepository

    UserManagementService --> ActivateUserController: systemUser

        deactivate UserManagementService

    ActivateUserController --> ActivateUserUI: systemUser

        deactivate ActivateUserController

    ActivateUserUI --> Administrator : shows operation's success

        deactivate ActivateUserUI
end alt






alt option deactivate user
    Administrator -> DeactivateUserUI: deactivate systemUser

        activate DeactivateUserUI

    DeactivateUserUI --> Administrator: asks to select which systemUser to deactivate

        deactivate DeactivateUserUI

    Administrator -> DeactivateUserUI: selects systemUser

        activate DeactivateUserUI

    DeactivateUserUI -> DeactivateUserController: deactivateUser(systemUser)

        activate DeactivateUserController

    DeactivateUserController -> AuthorizationService: ensureAuthenticatedUserHasAnyOf(roles)

        activate AuthorizationService

    AuthorizationService --> DeactivateUserController: true

        deactivate AuthorizationService

    DeactivateUserController -> UserManagementService: deactivateUser(systemUser)

        activate UserManagementService

    UserManagementService -> SystemUser: deactivate(currentTime)
        activate SystemUser

    SystemUser --> UserManagementService: return success

        deactivate SystemUser

    UserManagementService -> UserRepository: save(systemUser)

        activate UserRepository

    UserRepository --> UserManagementService: systemUser

        deactivate UserRepository

    UserManagementService --> DeactivateUserController: systemUser

        deactivate UserManagementService

    DeactivateUserController --> DeactivateUserUI: systemUser

        deactivate DeactivateUserController

    DeactivateUserUI --> Administrator : shows operation's success

        deactivate DeactivateUserUI
end alt






alt option list backOffice users
    Administrator -> ListBackofficeUsersUI: list backoffice users

        activate ListBackofficeUsersUI

    ListBackofficeUsersUI -> ListUsersController: elements()

        activate ListUsersController

    ListUsersController -> AuthorizationService: ensureAuthenticatedUserHasAnyOf(roles)

        activate AuthorizationService

    AuthorizationService --> ListUsersController: return true

        deactivate AuthorizationService

    ListUsersController -> UserManagementService: allUsers()

        activate UserManagementService

    UserManagementService -> UserRepository: findAll()

        activate UserRepository

    UserRepository --> UserManagementService: listSystemUsers

        deactivate UserRepository

    UserManagementService --> ListUsersController: listBackofficeUsers

        deactivate UserManagementService

    ListUsersController --> ListBackofficeUsersUI: listBackofficeUsers

        deactivate ListUsersController

    ListBackofficeUsersUI --> Administrator : shows operation's success

        deactivate ListBackofficeUsersUI

        deactivate Administrator
end alt



@enduml