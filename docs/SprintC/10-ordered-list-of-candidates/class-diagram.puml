@startuml
skinparam class {
    BackgroundColor White
    ArrowColor Black
    BorderColor Black
    FontColor Black
    FontSize 14
}

Title "Class Diagram - Ordered list of candidates"

package "presentation" {
    class OrderedListOfCandidatesUI {
        + doShow()
        + displayList(finalList, orderedList)
    }
}

package "application" {
    class OrderedListOfCandidatesController {
        + orderedList(applicationList)
        + applicationList(orderedList)
        + selectJobOpening()
        + allApplicationsOfJobOpening(JobReference jobReference)
    }

    class SelectJobOpeningController {
        + selectJobOpening()
        + selectJobOpeningAnalysis()
        + selectorPart(list)
    }

    class ListJobOpeningApplicationsController {
        + allApplicationsOfJobOpening(jobReference)
        + showApplicationsOfJobOpening(jobReference)
        + findJobOpening(jobReference)
        + findApplicationByID(id)
    }

    class ListJobInterviewsApplicationController {
        + allJobInterviewsOfApplication(application)
        + findJobInterviewById(identity)
    }


    class ListJobOpeningController{
    + showJobOpenings()
    + showJobOpeningsAnalysis()
    + allJobOpenings()
    + findJobOpeningByJobReference(jobReference)

    }
}


package "services" {
    class ApplicationService {
        + registerApplication(rank, applicationFiles, jobReference, candidate, operator)
        + findApplicationById(applicationID)
        + allApplications()
        + findApplicationsForJobOpening(jobOpening)
        + updateRank(rank, application)
        + applicationsByCM(cm)
    }

    class JobOpeningService {
        + registerJobOpening(jobReference, description, vacanciesNumber, address, mode, contractType, titleOrFunction, company)
        + findJobOpening(jobReference)
        + updateJobRequirements(jobReference, jobRequirementsSpecification)
        + verifyJobReference(jobReference)
        + allJobOpenings()
    }

    class JobInterviewService {
        + registerJobInterview(createdOn, time, score, result, application)
        + allJobInterviews()
        + updateInterviewModel(interviewModelToChange, id)
        + updateInterviewScore(newScore, interviewID)
        + findInterviewsForApplication(application)
    }

}

package "repositories" {
    interface ApplicationRepository {
        + allApplications()
        + ofIdentity(applicationId)
    }

    interface JobOpeningRepository {
        + allJobOpenings()
        + ofIdentity(jobReference)
    }

    interface JobInterviewRepository {
        + allInterviews()
    }
}

package "domain" {
    class Application {
        + Application(rank, createdOn, applicationFiles, jobReference, candidate, operator)
        + sameAs(otherApplication)
        + equals(otherApplication)
        + hashCode()
        + compareTo(otherApplication)
        + identity()
        + rank()
        + submissionDate()
        + status()
        + dataFile()
        + operator()
        + candidate()
        + jobReference()
        + updateRank(rank)
        + toString()
    }

    class JobOpening {
        + JobOpening(jobReference, description, vacanciesNumber, address, mode, contractType, titleOrFunction, Company)
        + identity()
        + sameAs(otherJobOpening)
        + jobReference()
        + description()
        + vacanciesNumber()
        + address()
        + mode()
        + contractType()
        + titleOrFunction()
        + company()
    }

    class JobInterview {
        + JobInterview(createdOn, time, score, result, application, interviewModel)
        + identity()
        + createdOn()
        + time()
        + score()
        + result()
        + application()
        + interviewModel()
        + changeInterviewModel(interviewModelToChange)
        + hashCode()
        + sameAs(otherObject)
        + equals(jobInterview)
    }

    class Candidate {
        + Candidate(user , telephoneNumber , curriculum)
        + Candidate()
        + user()
        + curriculum()
        + identity()
        + sameAs(other)
        + equals(o)
        + toString()

    }
}

OrderedListOfCandidatesUI --> OrderedListOfCandidatesController

OrderedListOfCandidatesController --> SelectJobOpeningController
OrderedListOfCandidatesController --> ListJobOpeningApplicationsController

OrderedListOfCandidatesUI ---> Candidate

SelectJobOpeningController -> ListJobOpeningController

OrderedListOfCandidatesController ->ListJobInterviewsApplicationController

ListJobInterviewsApplicationController --> JobInterviewService
ListJobOpeningApplicationsController --> JobOpeningService
ListJobOpeningApplicationsController --> ApplicationService
ListJobOpeningController -> JobOpeningService

ApplicationService --> ApplicationRepository
JobOpeningService --> JobOpeningRepository
JobInterviewService --> JobInterviewRepository

ApplicationRepository --> Application : stores
JobOpeningRepository --> JobOpening : stores
JobInterviewRepository --> JobInterview : stores

@enduml