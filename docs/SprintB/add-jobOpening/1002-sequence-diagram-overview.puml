@startuml
autonumber


actor "Customer Manager" as CM
participant AddJobOpeningUI <<presentation>>
participant ListCompaniesController <<application>>
participant AddJobOpeningController <<application>>
participant AuthorizationService <<service>>
participant CompanyService <<service>>
database    CompanyRepository <<application>>
participant JobOpeningService <<service>>
participant JobOpeningBuilder <<builder>>
participant JobOpening <<JobOpening>>
database    JobOpeningRepository <<repository>>

activate CM


    CM -> AddJobOpeningUI: add new JobOpening

        activate AddJobOpeningUI

    AddJobOpeningUI --> CM: asks for the JobOpening's information

        deactivate AddJobOpeningUI

    CM -> AddJobOpeningUI : Description, VacanciesNumber, Address, \nMode, ContractType, TitleOrFunction, JobReference, ProcessDate

        activate AddJobOpeningUI

    AddJobOpeningUI -> ListCompaniesController: allCompanies()

        activate ListCompaniesController

    ListCompaniesController -> AuthorizationService :ensureAuthenticatedUserHasAnyOf

        activate AuthorizationService

    AuthorizationService --> ListCompaniesController: true

        deactivate AuthorizationService

    ListCompaniesController -> CompanyService : allCompanies()

        activate CompanyService

    CompanyService -> CompanyRepository : allCompanies()

        activate CompanyRepository

    CompanyRepository --> CompanyService : listOfCompanies

        deactivate CompanyRepository

    CompanyService --> ListCompaniesController : listOfCompanies

        deactivate CompanyService

    ListCompaniesController --> AddJobOpeningUI : listOfCompanies

        deactivate ListCompaniesController

    AddJobOpeningUI --> CM : displays allCompanies listOfCompanies and asks to select one

        deactivate AddJobOpeningUI

    CM -> AddJobOpeningUI : selects company

        activate AddJobOpeningUI

    AddJobOpeningUI -> AddJobOpeningController: addJobOpening(description, vacanciesNumber, \n address, mode, contractType, titleOrFunction, \n jobReference, processDate)

        activate AddJobOpeningController

    AddJobOpeningController  -> JobOpeningService: registerJobOpening(jobReference, description, vacanciesNumber, \naddress, mode, contractType, titleOrFunction)

        activate JobOpeningService

    JobOpeningService -> JobOpeningBuilder: build()

        activate JobOpeningBuilder

    JobOpeningBuilder -> JobOpening : JobOpening(jobReference, description, \nvacanciesNumber, address, mode, \ncontractType, titleOrFunction)

        activate JobOpening

    JobOpening --> JobOpeningBuilder: jobOpening

        deactivate JobOpening

    JobOpeningBuilder --> JobOpeningService: jobOpening

        deactivate JobOpeningBuilder

    JobOpeningService -> JobOpeningRepository: save(JobOpening)

        activate JobOpeningRepository

    JobOpeningRepository --> JobOpeningService: return true

        deactivate JobOpeningRepository

    JobOpeningService --> AddJobOpeningController: jobOpening

        deactivate JobOpeningService

    AddJobOpeningController --> AddJobOpeningUI : JobOpening

        deactivate AddJobOpeningController

    AddJobOpeningUI --> CM : shows operation's success

        deactivate AddJobOpeningUI

        deactivate CM



@enduml