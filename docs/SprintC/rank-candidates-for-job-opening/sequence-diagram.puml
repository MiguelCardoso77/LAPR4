@startuml
autonumber

actor CustomerManager

participant RankCandidatesUI <<presentation>>
participant RankCandidatesController <<controller>>

participant JobOpeningService <<service>>
participant ApplicationService <<service>>
participant JobInterviewService <<service>>

database JobOpeningRepository <<repository>>
database ApplicationRepository <<repository>>
database JobInterviewRepository <<repository>>

activate CustomerManager

    CustomerManager -> RankCandidatesUI : asks to rank candidates
    activate RankCandidatesUI

        RankCandidatesUI -> RankCandidatesController : findAllJobOpenings()
        activate RankCandidatesController

            RankCandidatesController -> JobOpeningService : findAllJobOpenings()
            activate JobOpeningService

                 JobOpeningService -> JobOpeningRepository : findAll()
                 activate JobOpeningRepository

                     JobOpeningRepository --> JobOpeningService : jobOpenings
                 deactivate JobOpeningRepository

                JobOpeningService --> RankCandidatesController : jobOpenings
            deactivate JobOpeningService

            RankCandidatesController -> JobOpeningService : filterAnalysisState(jobOpenings)
            activate JobOpeningService

                    JobOpeningService --> RankCandidatesController : filteredJobOpenings
            deactivate JobOpeningService

            RankCandidatesController --> RankCandidatesUI : filteredJobOpenings
        deactivate RankCandidatesController

        RankCandidatesUI -> CustomerManager : lists job opening and asks to select one
    deactivate RankCandidatesUI

    CustomerManager -> RankCandidatesUI : selects job opening
    activate RankCandidatesUI

        RankCandidatesUI -> RankCandidatesController : findApplicationsForJobOpening(selectedJobOpening)
        activate RankCandidatesController

            RankCandidatesController -> ApplicationService : findByJobOpening(selectedJobOpening)
            activate ApplicationService

                ApplicationService -> ApplicationRepository : findByJobOpening(selectedJobOpening)
                activate ApplicationRepository

                    ApplicationRepository --> ApplicationService : applications
                deactivate ApplicationRepository

                ApplicationService --> RankCandidatesController : applications
            deactivate ApplicationService

            RankCandidatesController --> RankCandidatesUI : applications
        deactivate RankCandidatesController

loop while ranking all applications

        RankCandidatesUI -> RankCandidatesController : findLastJobInterview(currentApplication)
        activate RankCandidatesController
            note right of RankCandidatesController
            The application might not have interviews but the customer manager can still rank it.
            end note

            RankCandidatesController -> JobInterviewService : findByApplication(currentApplication)
            activate JobInterviewService

                JobInterviewService -> JobInterviewRepository : findByApplication(currentApplication)
                activate JobInterviewRepository

                    JobInterviewRepository --> JobInterviewService : interview
                deactivate JobInterviewRepository

                JobInterviewService --> RankCandidatesController : interview
            deactivate JobInterviewService

            RankCandidatesController --> RankCandidatesUI : interview
        deactivate RankCandidatesController

        RankCandidatesUI --> CustomerManager : shows interview score for the current \napplication and asks to rank it
    deactivate RankCandidatesUI

    CustomerManager -> RankCandidatesUI : ranks the application
    activate RankCandidatesUI

        RankCandidatesUI -> RankCandidatesController : updateRank(rank, selectedApplication)
        activate RankCandidatesController

            RankCandidatesController -> ApplicationService : save(selectedApplication)
            activate ApplicationService

                ApplicationService -> ApplicationRepository : save(selectedApplication)
                activate ApplicationRepository

                    ApplicationRepository --> ApplicationService : successful operation
                deactivate ApplicationRepository

                ApplicationService --> RankCandidatesController : successful operation
            deactivate ApplicationService

            RankCandidatesController --> RankCandidatesUI : successful operation
        deactivate RankCandidatesController

        RankCandidatesUI --> CustomerManager : shows success message
    deactivate RankCandidatesUI

end loop

deactivate CustomerManager

@enduml